<?xml version="1.0"?>
<project name="OpenMap_Core" default="all" basedir=".">

	<!--  ############################
	Set up the different builds.
	############################ -->

	<target name="init" description="Sets properties needed by the OpenMap core targets.">
		<tstamp />

		<property name="openmap.home" value="../.." />
		<property name="openmap.core" value="${openmap.home}/src/core" />		
		<property name="openmap.src" value="${openmap.core}/src/main/java" />
		<property name="openmap.classes" value="${openmap.core}/target/classes" />
		<property name="openmap.jar" value="${openmap.core}/target/openmap.jar" />
		<property name="openmap.docs" value="${openmap.home}/doc" />

		<property name="general.excludes" value="**/*.in, **/Makefile, **/*.bat,
							 **/ChangeLog, **/*.html, **/*.txt,
							 **/*.*.txt, **/*.dat,
							 **/*.pl,
							 **/unimplemented/**, 
							 **/build.xml" />

		<property name="javac.excludes" value="${general.excludes}, 
						       **/*.gif,
						       **/*.png, 
						       **/*.properties" />

		<property name="jai.includes" value="**/jai/**, **/geotiff/**" />
		<property name="json.includes" value="**/geojson/**, **/tpk/**" />
		<property name="postgis.includes" value="**/postgis/**" />
		<property name="browserlauncher.includes" value="**/BrowserLauncher*.java" />
		<property name="vectortile.includes" value="**/VectorMapTileLayer.java, **/mb/**" />

		<property name="jar.excludes" value="${general.excludes}, **/*.java" />
		<available classname="com.sun.media.jai.codec.ImageCodec" property="do.jai" />
		<available classname="com.fasterxml.jackson.annotation.JsonInclude" property="do.json" />
		<available classname="org.postgis.PGgeometry" property="do.postgis" />
		<available classname="edu.stanford.ejalbert.BrowserLauncher" property="do.browserlauncher" />
		<available classname="no.ecc.vectortile.VectorTileDecoder" property="do.vectortile" />

		<echo message="Java Home: ${java.home}" />
	</target>

	<!--  ############################
	      End of property setup.
	      ############################ -->

	<!--  ############################
	      Main targets
	      ############################ -->

	<target name="all" depends="jar" description="Compiles standard OpenMap classes and creates the jar files." />

	<target name="jar" depends="classes" description="Builds jar files, placing them in the lib directory.">

		<jar jarfile="${openmap.jar}" basedir="${openmap.classes}" manifest="${openmap.home}/share/manifest.txt" index="true" includes="openmap.properties,
			 **/*.class,
			 **/*.gif, **/*.png,
			 **/*.properties" />
	</target>

	<!--  ############################
	Standard target, to build everything you can.
	############################ -->
	<target name="classes" depends="init" description="Compiles the OpenMap classes.">

	    <mkdir dir="${openmap.classes}" />

		<!-- Main OpenMap Classes -->
		<javac includeantruntime="false" srcdir="${openmap.src}" destdir="${openmap.classes}" debug="on" excludes="${javac.excludes},${jai.includes},${json.includes},${postgis.includes},${browserlauncher.includes},${vectortile.includes}" source="1.5" target="1.5"/>

		<!-- Optional classes, depending on available external packages -->
		<condition property="jai.message" value="jai dependencies found" else="jai dependencies NOT found, skipping those classes...">
		  <isset property="do.jai"/>
		</condition>
		<echo message="${jai.message}"/>

		<condition property="json.message" value="json dependencies found" else="json dependencies NOT found, skipping those classes...">
		  <isset property="do.json"/>
		</condition>
		<echo message="${json.message}"/>

		<condition property="postgis.message" value="postgis dependencies found" else="postgis dependencies NOT found, skipping those classes...">
		  <isset property="do.postgis"/>
		</condition>
		<echo message="${postgis.message}"/>

		<condition property="browserlauncher.message" value="browserlauncher dependencies found" else="browserlauncher dependencies NOT found, skipping those classes...">
		  <isset property="do.browserlauncher"/>
		</condition>
		<echo message="${browserlauncher.message}"/>

		<condition property="vectortile.message" value="vector tile dependencies found" else="vector tile dependencies NOT found, skipping those classes...">
		  <isset property="do.vectortile"/>
		</condition>
		<echo message="${vectortile.message}"/>

		<condition property="suggestion.message" value="" else="NOTE: dependencies can be retrieved if you use maven to build OpenMap...">
		  <isset property="do.vectortile" />
		</condition>
		<echo message="${suggestion.message}"/>

		<antcall target="classes.jai" />
		<antcall target="classes.json" />
		<antcall target="classes.postgis" />
		<antcall target="classes.browserlauncher" />
		<antcall target="classes.vectortile" />

		<echo message="gathering resources..."/>
		<!-- Copy the gifs and other resources to the new classpath. -->
		<copy todir="${openmap.classes}" file="${openmap.home}/openmap.properties" />
		<copy todir="${openmap.classes}">
			<fileset dir="${openmap.core}/src/main/resources" includes="**/*.gif, **/*.png, **/*.properties" />
		</copy>

	</target>

	<target name="classes.jai" if="${do.jai}" >
	  <echo message="Compiling JAI classes..." />
	  <javac includeantruntime="false" srcdir="${openmap.src}" destdir="${openmap.classes}" debug="on" includes="${jai.includes}" source="1.5" target="1.5"/>
	</target>

	<target name="classes.json" if="${do.json}" >
	  <echo message="Compiling JSOM classes..." />
	  <javac includeantruntime="false" srcdir="${openmap.src}" destdir="${openmap.classes}" debug="on" includes="${json.includes}" source="1.5" target="1.5"/>
	</target>

	<target name="classes.postgis" if="${do.postgis}" >
	  <echo message="Compiling PostGIS classes..." />
	  <javac includeantruntime="false" srcdir="${openmap.src}" destdir="${openmap.classes}" debug="on" includes="${postgis.includes}" source="1.5" target="1.5"/>
	</target>

	<target name="classes.browserlauncher" if="${do.browserlauncher}" >
	  <echo message="Compiling BrowserLauncher classes..." />
	  <javac includeantruntime="false" srcdir="${openmap.src}" destdir="${openmap.classes}" debug="on" includes="${browserlauncher.includes}" source="1.5" target="1.5"/>
	</target>

	<target name="classes.vectortile" if="${do.vectortile}" >
	  <echo message="Compiling Vector Tile classes..." />
	  <javac includeantruntime="false" srcdir="${openmap.src}" destdir="${openmap.classes}" debug="on" includes="${vectortile.includes}" source="1.5" target="1.5"/>
	</target>

	<!--  ############################
	Build the documentation.
	############################ -->
	<target name="docs" depends="init" description="Make the javadoc API html documents.">
		<javadoc sourcepath="${openmap.src}" destdir="${openmap.docs}/api" maxmemory="256m" excludepackagenames="**unimplemented**" packagenames="com.bbn.openmap.*, Acme.*, dopplet.*, edu.*" author="true" version="true" use="true" windowtitle="OpenMap API" doctitle="OpenMap" bottom="Copyright (C) BBNT Solutions LLC; See http://openmap.bbn.com/ for details">
			<classpath refid="ext_tools_classpath" />
		</javadoc>
	</target>

	<!--  ############################
	Cleanup targets
	############################ -->
	<target name="clean_all" depends="clean, docsclean" description="Delete jar files, class files, and generated documentation." />

	<target name="clean" depends="init" description="Delete jar files and all class files" >
		<delete dir="${openmap.core}/target" />
	</target>

	<target name="distclean" depends="init" description="Delete class files, but not the jar files.">
		<delete dir="${openmap.classes}" />		
	</target>

	<target name="jarclean" description="Delete only the jar files from the lib directory.">
		<delete file="${openmap.core}/target/*.jar" />
	</target>

	<target name="docsclean" depends="init" description="Delete only the generated API documentation.">
		<delete>
			<fileset dir="${openmap.docs}/api" includes="**/*.html,
				     **/stylesheet.css, 
				     **/package-list" excludes="doc-index.html" />
		</delete>
		<delete dir="${openmap.docs}/api/com" />
		<delete dir="${openmap.docs}/api/Acme" />
		<delete dir="${openmap.docs}/api/edu" />
	</target>

	<!--  ############################
	End of cleanup targets.
	############################ -->

</project>

